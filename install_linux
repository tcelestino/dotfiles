#!/usr/bin/env bash

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
NC='\033[0m'

# Get current location
DIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)

# Array to store completed steps
declare -a completed_steps=()

# Register a completed step
# @param $1 Step name
register_completed_step() {
  local step="$1"
  completed_steps+=("$step")
}

# Print info messages
# @param $1 Message
log() {
  echo -e "${GREEN}[INFO]${NC} $1"
}

# Print error messages in red and exit
# @param $1 Message
error() {
  echo -e "${RED}[ERROR]${NC} $1"
  exit 1
}

# Create a symbolic link
# @param $1 Source file path
# @param $2 Destination link path
safe_link() {
  local src="$1"
  local dest="$2"

  if [ -e "$dest" ] || [ -L "$dest" ]; then
      log "Found $dest - removing..."
      rm -f "$dest"
  fi

  if [ ! -e "$src" ]; then
      error "Source file $src does not exist!"
  fi

  log "Linking $dest to $src"
  ln -s "$src" "$dest"
}

# Copy a directory
# @param $1 Source directory path
# @param $2 Destination directory path
copy_dir() {
    local src="$1"
    local dest="$2"

    if [ ! -d "$src" ]; then
        error "Source directory $src does not exist!"
    fi

    if [ -d "$dest" ]; then
        log "Found $dest - renaming..."
        mv "$dest" "$dest.old"
    fi

    log "Copying directory $src to $dest"
    if ! cp -R "$src" "$dest"; then
        error "Failed to copy directory $src to $dest"
    fi
}

# Copy a file
# @param $1 Source file path
# @param $2 Destination file path
copy_file() {
  local src="$1"
  local dest="$2"

  if [ ! -f "$src" ]; then
    error "Source file $src does not exist!"
  fi

  if [ -f "$dest" ]; then
    log "Found $dest - renaming..."
    mv "$dest" "$dest.old"
  fi

  log "Copying file $src to $dest"
  if ! cp "$src" "$dest"; then
    error "Failed to copy file $src to $dest"
  fi
}

# Install Homebrew
install_brew() {
  if ! command -v brew >/dev/null 2>&1; then
    log "Installing Homebrew..."
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
  else
    log "Homebrew is already installed."
  fi
}

# Install Oh My Zsh
install_oh_my_zsh() {
  if [ -d "$HOME/.oh-my-zsh" ]; then
    log "Oh My Zsh is already installed."
    register_completed_step "Oh My Zsh (already installed)"
    return 0
  fi

  log "Installing Oh My Zsh..."
  if ! sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"; then
    error "Failed to install Oh My Zsh"
    return 1
  fi

  register_completed_step "Oh My Zsh"
  log "Oh My Zsh installed successfully!"
}

# Install Node.js
install_node_using_n() {
  if [ -d "$HOME/local/n/versions/node" ]; then
    log "Node.js is already installed."
    register_completed_step "Node.js (already installed)"
    return 0
  else
    log "Installing Node.js..."
    if ! sh -c "$(curl -fsSL https://raw.githubusercontent.com/mklement0/n-install/stable/bin/n-install | bash -s 22)"; then
      error "Failed to install Node.js"
    fi
    register_completed_step "Node.js"
    log "Node.js installed successfully!"
  fi
}

# Install Deno runtime
install_deno() {
  if [ -d "$HOME/.deno/bin/deno" ]; then
    log "Deno is already installed.."
    register_completed_step "Deno (already installed)"
    return 0
  else
    log "Installing Deno"
    if ! sh -c "$(curl -fsSL https://deno.land/install.sh)"; then
      error "Failed to install Deno"
    fi
    register_completed_step "Deno"
    log "Deno installed successfully!"
  fi
}

# Configure Git settings
setup_git() {
  copy_file "$DIR/git/.gitconfig" "$HOME/.gitconfig"
  copy_file "$DIR/git/.gitignore" "$HOME/.gitignore"
  copy_file "$DIR/git/.gitattributes" "$HOME/.gitattributes"
  register_completed_step "Git"
  log "Git configured successfully!"
}

# Configure Zsh settings
setup_zsh() {
  copy_file "$DIR/linux/zsh/.zshrc" "$HOME/.zshrc"
  copy_dir "$DIR/zsh/themes" "$HOME/.oh-my-zsh/themes"
  copy_file "$DIR/linux/zsh/aliases.zsh" "$HOME/.oh-my-zsh/custom/aliases.zsh" # TODO: use aliases.zsh on macos too
  copy_dir "$DIR/zsh/custom-functions" "$HOME/.oh-my-zsh/plugins/custom-functions"
  register_completed_step "Zsh"
  log "Zsh configured successfully!"
}

# Configure Homebrew and install packages from Brewfile
setup_brew() {
  copy_file "$DIR/linux/Brewfile" "$HOME/Brewfile"
  log "Executing brew bundle install..."
  if ! brew bundle install; then
      error "Brew bundle install failed"
  fi
  register_completed_step "Homebrew"
  log "Homebrew configured successfully!"
}

# Install global NPM packages
install_pkg_global() {
  log "Installing global npm packages..."
  npm install -g git-cz n fastify-cli npm-check-updates
  register_completed_step "NPM packages"
  log "NPM packages installed successfully!"
}

# Configure NPM settings and install global packages
setup_npm() {
  copy_file "$DIR/.npmrc" "$HOME/.npmrc"
  register_completed_step "NPM"
  log "NPM configured successfully!"

  # Install npm globally without sudo. Based on https://github.com/sindresorhus/guides/blob/main/npm-global-without-sudo.md
  if [ -d "$HOME/.npm-packages" ]; then
    log ".npm-packages folder exists"
  else
    mkdir -p "$HOME/.npm-packages"
  fi
}

# Custom fonts
setup_fonts() {
    local font_dir="$HOME/.local/share/fonts"
    if [ ! -d "$font_dir" ]; then
      mkdir -p "$font_dir"
    fi
    log "Installing fonts for Linux..."
    cp "$DIR/extras/fonts/"* "$font_dir/"
    fc-cache -f -v
    register_completed_step "Fonts"
    log "Fonts installed successfully!"
  else
    error "Error installing fonts"
  fi
}

ask_continue() {
  local message="$1"
  local step="$2"
  echo -e "\n${GREEN}[INFO]${NC} Step $step: $message"
  echo -e "${GREEN}[INFO]${NC} Options:"
  echo -e "  ${GREEN}[s]${NC} - Yes, continue"
  echo -e "  ${GREEN}[n]${NC} - No, skip this step"
  echo -e "  ${GREEN}[q]${NC} - Exit installation"
  read -p "Your choice (s/n/q): " response

  case "$response" in
    [Ss]*)
      return 0
      ;;
    [Nn]*)
      log "Step $step skipped."
      return 1
      ;;
    [Qq]*)
      log "Installation interrupted by user."
      exit 0
      ;;
    *)
      log "Invalid option. Please try again."
      ask_continue "$message" "$step"
      ;;
  esac
}

main() {
  log "Starting installation from $DIR..."
  log "This script will configure your environment with the following steps:"
  echo -e "\n1. Install Oh My Zsh"
  echo "2. Install Homebrew"
  echo "3. Install Node.js"
  echo "4. Install Deno"
  echo "5. Configure Zsh"
  echo "6. Configure Homebrew and install packages"
  echo "7. Configure Git"
  echo "8. Configure NPM"
  echo "9. Install global NPM packages"
  echo "10. Configure the fonts"

  ask_continue "Do you want to start the installation?" "0" || exit 0

  if ask_continue "Install Oh My Zsh" "1"; then
    install_oh_my_zsh
  fi

  if ask_continue "Install Homebrew" "2"; then
    install_brew
  fi

  if ask_continue "Install Node.js" "3"; then
    install_node_using_n
  fi

  if ask_continue "Install Deno" "4"; then
    install_deno
  fi

  if ask_continue "Configure Zsh" "5"; then
    setup_zsh
  fi

  if ask_continue "Configure Homebrew and install packages" "6"; then
    setup_brew
  fi

  if ask_continue "Configure Git" "7"; then
    setup_git
  fi

  if ask_continue "Configure NPM" "8"; then
    setup_npm
  fi

  if ask_continue "Install global NPM packages (git-cz, n, fastify-cli, npm-check-updates)" "9"; then
    install_pkg_global
  fi

  if ask_continue "Configure the fonts" "10"; then
    setup_fonts
  fi

  log "Configurations completed successfully! ðŸŽ‰"
  log "Steps executed:"
  for step in "${completed_steps[@]}"; do
    echo "- $step"
  done
}

main "$@"
